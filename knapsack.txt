#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define ll long long int
#define dbg(a,b,c) cerr<<a<<"  "<<b<<"  "<<c<<endl;
#define mem(a,b) memset(a,b,sizeof(a))
#define endl "\n"
#define INF 1e18
#define w(t) cin>>t;while(t--)
#define kill(a) {cout<<a<<endl;continue;}
#define pi  2 * acos(0.0)
int t,ans=0,tot=0,kk=0;
const ll mxn=2e5+4,mod=1e9+7;
signed main()
{

    //fast;
    w(t)
    {
        int n,m,a,b,c,d,e,i,j,k,sm=0,sm1=0,cn=0,cn1=0,mx=-1e9,mn=1e9;
        string s,ss,sr,sa;
        bool f=false;
        int mx_wg;
        cin>>n>>mx_wg;
        int wg[n+1],pro[n+1];
        for(i=1;i<=n;i++)cin>>wg[i];
        for(i=1;i<=n;i++)cin>>pro[i];
        int dp[n+1][mx_wg+1];
        memset(dp,0,sizeof(dp));
        
        /*Solution using 1D array--------------->>
        for(int i=1;i<=n;i++)
        {
            for(int j=wt;j>=ar[i][0];j--)dp[j]=max(dp[j],dp[j-ar[i][0]]+ar[i][1]);
        }*/
        
        //Solution using 2D array---------------->>
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=mx_wg;j++)
            {
                if(wg[i]>j)dp[i][j]=dp[i-1][j];
                else dp[i][j]=max(pro[i]+dp[i-1][j-wg[i]],dp[i-1][j]);
            }
        }
        cout<<dp[n][mx_wg]<<endl;
    }
}
#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define ll long long int
#define dbg(a,b,c) cerr<<a<<"  "<<b<<"  "<<c<<endl;
#define mem(a,b) memset(a,b,sizeof(a))
#define endl "\n"
#define INF 1e18
#define w(t) cin>>t;while(t--)
#define kill(a) {cout<<a<<endl;continue;}
#define pi  2 * acos(0.0)
int t,ans=0,tot=0,kk=0;
const ll mxn=2e5+4,mod=1e9+7;
signed main()
{

    //fast;
   // w(t)
   // {
        int n,m,a,b,c,d,e,i,j,k,sm=0,sm1=0,cn=0,cn1=0,mx=-1e9,mn=1e9;
        string s,ss,sr,sa;
        bool f=false;
        int tot_weight;
        cin>>n>>tot_weight;
        int weight[n],profit[n];
        priority_queue<pair<double,pair<int,int>>>pr;
        for(i=0;i<n;i++)cin>>weight[i];
        for(i=0;i<n;i++)cin>>profit[i];
        for(i=0;i<n;i++)pr.push({(double)profit[i]/weight[i],{weight[i],profit[i]}});
        int is_posible=0;double mx_profit=0;
        while(pr.size())
        {
            auto it=pr.top();
            pr.pop();
            a=it.first;
            b=it.second.first;
            c=it.second.second;
            if(is_posible+b<=tot_weight)is_posible+=b,mx_profit+=c;
            else
            {
                int rem=tot_weight-is_posible;
                mx_profit+=((double)rem/b)*c;
                break;
            }
        }
        cout<<mx_profit<<endl;

   // }
}

